openapi: 3.0.3
info:
  title: SnapFeast API Project
  version: 1.0.0
  description: API Documentation for SnapFeast
paths:
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/v1/orders/:
    post:
      operationId: v1_orders_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MealOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MealOrder'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealOrder'
          description: ''
  /api/v1/orders/{id}/:
    get:
      operationId: v1_orders_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealOrder'
          description: ''
    put:
      operationId: v1_orders_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MealOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MealOrder'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealOrder'
          description: ''
    patch:
      operationId: v1_orders_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMealOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMealOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMealOrder'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealOrder'
          description: ''
    delete:
      operationId: v1_orders_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/orders/list/:
    get:
      operationId: v1_orders_list_list
      tags:
      - v1
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MealOrder'
          description: ''
  /api/v1/orders/recommendations/:
    get:
      operationId: v1_orders_recommendations_list
      description: Retrieve meal recommendations for the logged-in user based on their
        preferences and past orders.
      summary: Get meal recommendations
      tags:
      - Meal Recommendations
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meal'
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: No recommendations found
          description: ''
        '500':
          content:
            application/json:
              schema:
                description: Internal server error
          description: ''
  /api/v1/users/facial-login/:
    post:
      operationId: v1_users_facial_login_create
      description: Authenticate a user using facial recognition.
      tags:
      - v1
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Login Face Image Uploaded by User
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Login Successful
                content:
                  application/json:
                    example:
                      status: Success
                      message: Login successful
                      user_id: '123'
              examples:
                SuccessfulLoginResponse:
                  value:
                    status: Success
                    message: Login successful
                    user_id: '123'
                  summary: Successful login after facial recognition.
                  description: Response after a successful facial recognition that
                    identifies the user.
                FailedLoginResponse-NoFaceDetected:
                  value:
                    status: Error
                    message: No recognizable face detected in the image.
                  summary: No face detected in the image.
                  description: Response when no recognizable face is detected in the
                    submitted image.
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Invalid or Missing Image
                content:
                  application/json:
                    examples:
                      invalid_image:
                        summary: Invalid Image Provided
                        value:
                          status: Error
                          message: Invalid image format or corrupted file.
                      no_face_detected:
                        summary: No Face Detected
                        value:
                          status: Error
                          message: No recognizable face detected in the image.
          description: ''
  /api/v1/users/login/:
    post:
      operationId: v1_users_login_create
      description: Authenticate a user using their email and password.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailLogin'
            examples:
              SuccessfulLogin:
                value:
                  email: user@example.com
                  password: securepassword123
                summary: Successful Login
                description: A successful login request.
              FailedLogin:
                value:
                  email: user@example.com
                  password: wrongpassword
                summary: Failed Login
                description: A failed login request due to invalid credentials.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EmailLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EmailLogin'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                desrciption: Login Successful
                content:
                  application/json:
                    example:
                      status: Success
                      message: Login successful
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Invalid Credentials or Bad Request
                content:
                  application/json:
                    example:
                      status: Error
                      message: Invalid credentials
                    example2:
                      status: Error
                      message: This field is required.
          description: ''
  /api/v1/users/signup/:
    post:
      operationId: v1_users_signup_create
      description: Register a new user and their facial data for recognition.
      tags:
      - v1
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username for the new user. Must be unique.
                first_name:
                  type: string
                  description: First name of the new user.
                last_name:
                  type: string
                  description: Last name of the new user.
                email:
                  type: string
                  format: email
                  description: Email address of the new user. Must be unique.
                age:
                  type: integer
                  description: Age of the new user. Must be an integer.
                preferences:
                  type: string
                  description: Food Preferences of User
                image:
                  type: string
                  format: binary
                  description: Face Image Uploaded by User
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
              examples:
                Example1:
                  value:
                    username: john_doe
                    first_name: John
                    last_name: Doe
                    email: john.doe@example.com
                    age: 30
                    preferences: None
                  summary: Example of a valid request
                  description: This is what a valid request might look like
          description: ''
  /api/v1/users/update/:
    get:
      operationId: v1_users_update_retrieve
      description: Retrieve the authenticated user's profile.
      tags:
      - v1
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Profile not found
          description: ''
    put:
      operationId: v1_users_update_update
      description: Update the authenticated user's profile.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
            examples:
              UpdateProfileExample:
                value:
                  username: updated_username
                  first_name: John
                  last_name: Doe
                  email: updated@example.com
                  age: 30
                  preferences: Updated preferences
                  image: path/to/updated/image.jpg
                summary: Example of a user profile update request.
                description: A valid example showing how to update user profile data.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
              examples:
                SuccessfulProfileUpdateResponse:
                  value:
                    id: 1
                    username: updated_username
                    first_name: John
                    last_name: Doe
                    email: updated@example.com
                    age: 30
                    preferences: Updated preferences
                    image: path/to/updated/image.jpg
                  summary: Successful profile update response.
                  description: Response returned after successfully updating the user
                    profile.
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Invalid data
          description: ''
components:
  schemas:
    EmailLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    Meal:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        meal:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/MealEnum'
          - $ref: '#/components/schemas/NullEnum'
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
      required:
      - id
    MealEnum:
      enum:
      - Amala with Goat Meat
      - Jollof and Fried Rice with Chicken
      - Porridge with Vegetable
      - Pounded Yam with Egusi Soup
      - White Rice, Beans and Fried Stew
      - Yam and Fried Eggs
      - Spaghetti Bolognese with Sauce
      - Chicken and Chips
      - Fruit Salad
      type: string
      description: |-
        * `Amala with Goat Meat` - Amala with Goat Meat
        * `Jollof and Fried Rice with Chicken` - Jollof and Fried Rice with Chicken
        * `Porridge with Vegetable` - Porridge with Vegetable
        * `Pounded Yam with Egusi Soup` - Pounded Yam with Egusi Soup
        * `White Rice, Beans and Fried Stew` - White Rice, Beans and Fried Stew
        * `Yam and Fried Eggs` - Yam and Fried Eggs
        * `Spaghetti Bolognese with Sauce` - Spaghetti Bolognese with Sauce
        * `Chicken and Chips` - Chicken and Chips
        * `Fruit Salad` - Fruit Salad
    MealOrder:
      type: object
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        meal:
          type: integer
          nullable: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        date_ordered:
          type: string
          format: date-time
          readOnly: true
      required:
      - date_ordered
      - price
      - user
    NullEnum:
      enum:
      - null
    PatchedMealOrder:
      type: object
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        meal:
          type: integer
          nullable: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        date_ordered:
          type: string
          format: date-time
          readOnly: true
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          nullable: true
          maxLength: 200
      required:
      - id
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          nullable: true
          maxLength: 200
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          nullable: true
          maxLength: 200
        age:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        preferences:
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
      required:
      - id
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
